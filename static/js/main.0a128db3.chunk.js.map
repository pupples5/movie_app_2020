{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","console","log","className","src","alt","map","genre","index","key","slice","App","state","isLoading","moives","getMovies","a","axios","get","movies","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sUAiCeA,MA3Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAE/C,OADAC,QAAQC,IAAIF,GACL,yBAAKG,UAAU,SAElB,yBAAKC,IAAKL,EAAQM,IAAKR,EAAOA,MAAOA,IACrC,yBAAKM,UAAU,cACX,wBAAIA,UAAU,eAAeN,GAC7B,wBAAIM,UAAU,cAAcP,GAC5B,wBAAIO,UAAU,UAAUH,EAAOM,KAAI,SAACC,EAAOC,GAAR,OAC/B,wBAAIC,IAAOD,EAAOL,UAAU,gBAAgBI,OAEjD,uBAAGJ,UAAU,iBAAiBL,EAAQY,MAAM,EAAG,SC6J3CC,G,iNAhDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEACmCC,IAAMC,IAAI,4DAD7C,gBACcC,EADd,EACFC,KAAQA,KAAQD,OACxBlB,QAAQC,IAAIiB,GACZ,EAAKE,SAAS,CAAEF,SAAQN,WAAW,IAHzB,2C,mFASVS,KAAKP,c,+BAEG,IAAD,EACuBO,KAAKV,MAA3BC,EADD,EACCA,UAAWM,EADZ,EACYA,OACnB,OACE,6BAAShB,UAAU,aAChBU,EAAa,yBAAKV,UAAU,UAC3B,0BAAMA,UAAU,eAAhB,iBAEE,yBAAKA,UAAU,UACZgB,EAAOb,KAAI,SAAAiB,GAEV,OADAtB,QAAQC,IAAIqB,GACL,kBAAC,EAAD,CACLd,IAAKc,EAAM5B,GACXA,GAAI4B,EAAM5B,GACVC,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAMC,mBACdxB,OAASuB,EAAMvB,kB,GAnCfyB,IAAMC,YCxHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0a128db3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n//movie component는 state 필요없고 랜더링만 필요한 상황\r\n\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n    console.log(genres);\r\n    return <div className=\"movie\">\r\n\r\n        <img src={poster} alt={title} title={title}></img>\r\n        <div className=\"movie_data\">\r\n            <h3 className=\"movie_title\">{title}</h3>\r\n            <h5 className=\"movie_year\">{year}</h5>\r\n            <ul className=\"genres\">{genres.map((genre, index) => (\r\n                <li key = {index} className=\"genres_genre\">{genre}</li>\r\n            ))}</ul>\r\n           <p className=\"movie_summary\">{summary.slice(0, 140)}</p>\r\n           \r\n        </div>\r\n    </div>\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport Potato from './Potato.js';\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n/*\nfunction Food(props){\n  console.log(props.fav);\n  return <h1>like Potato</h1>\n\n}*/\n// props.fav -> {fav} javascript6에서 지원함\n// 밑에처럼 <Food 컴포넌트에 props형태로 데이터를 넣을 수 있는데 이러면 Food()함수에서 첫번째 매개변수 위치로 할당되서 전달됨\n// function Food({name, picture, rating}){\n\n// return (<div><h1>like {name}</h1>\n//         <img src = {picture} alt = {name}></img>\n//         <h3>{rating}</h3>\n// </div>\n// );\n//}\n\n\n// const foodILike= [\n//   {\n//     name : \"Kimchi\",\n//     picture : \"https://i.imgur.com/sW1WNds.jpeg\",\n//     rating : 5\n//   },\n//   {\n//     name : \"Pizza\",\n//     picture : \"https://i.imgur.com/J9osDN7.jpg\",\n//     rating: 4.6\n//   }\n// ]\n\n\n// js map 개념\n/*\nfriends = [\"dal\",\"mark\",\"park\",\"kim\"];\n\nfreinds.map(fucntion(friend){\n  console.log(friend); \n  return friend +\"Hi\";\n})\narray에 정의한 function을 실행시키고 그 결과 값을 어레이로 반환해주는 함수\n*/\n\n// 내가 얻고싶은 prop 타입을 아래에 명세\n// Food.propTypes = {\n//     name : PropTypes.string.isRequired,\n//     picture : PropTypes.string.isRequired,\n//     rating : PropTypes.number.isRequired\n\n//  }\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//      <h1>Hello!</h1>\n//      {foodILike.map((dish, index) => \n//  <Food name ={dish.name.toString()} picture = {dish.picture} rating = {dish.rating} key = {index}/>)}\n//     </div>\n\n//   );\n// }\n\n//JSX 개념 javascript HTML 사용해서 랜더링할 페이지 생성해줌\n//component 는 HTML을 반환하는 react가 동작하는게 이 파트\n\n\n\n\n//state 예제\n// react는 class component의 render 메소드를 자동으로 실행\n// class App extends React.Component{\n\n//   //동적 데이터\n//   state = {\n//     count : 0,\n\n//   };\n\n//   add = () => {\n//     //this.state.count +=1; current쓰면 리액트가 현재의 state를 반환해줘서 그걸로 처리가 가능\n//     this.setState(current =>{count : current.state.count + 1});\n//   };\n//   minus = () => {\n//     //this.state.count -=1;\n//     this.setState({count : this.state.count-1});\n//   };//참고로 state 변경후 render함수 재호출로 refresh해야 표시가됨\n// // state를 직접변경하지 말고 set등을 사용해서 바꾸는걸 추천해줌 setState하면 인식하고 랜더까지 자동으로 리액트가 처리\n// // 변경이 발생한 부분만 리프레쉬처리해줌 가상 DOM을 유지하고 있기때문에 빨리 처리가 가능\n\n// componentDidMount(){\n//   console.log(\"component rendered\");\n// }\n// componentDidUpdate(){\n//   console.log(\"i just updated\");\n// }\n// componentWillUnmount(){\n//   console.log(\"Good bye my old friend\");\n// }\n// render(){\n//   console.log(\"component render\");\n//   return (<div>\n//     <h1>The number is : {this.state.count}</h1>\n//     <button onClick={this.add}>Add</button>\n//     <button onClick={this.minus}>Minus</button>\n//     </div>\n//   );\n//   }\n\n\n// }\n\n//component 라이프 사이클\n// mounting updating unmounting(컴포넌트 사망 : 다른페이지 이동, render재호출 등등)\n// constructor -> JS에서 클래스 생성때 만드는 함수였던 것 render전에 호출됨\n\n\n\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    moives: []\n  };\n\n\n  getMovies = async () => {\n    const { data: { data: { movies } } } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    console.log(movies);\n    this.setState({ movies, isLoading: false });\n  }\n  componentDidMount() {\n    // setTimeout(() =>{\n    //   this.setState({isLoading : false});\n    // }, 6000);\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (<div className=\"loader\">\n          <span className=\"loader_text\">Loading.....</span>\n        </div>) : (\n            <div className=\"movies\">\n              {movies.map(movie => {\n                console.log(movie);\n                return <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres= {movie.genres}\n                />\n              })}\n            </div>\n\n\n          )}\n      </section>\n    );\n  }\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Potato/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//랜더링할때 매개변수로 하나의 컴포넌트만 가능"],"sourceRoot":""}